// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  EDITOR
}

enum CourseStatus {
  C
  E
  R
}

enum ExcoType {
  CISSA
  SRC
  STAFF
}

model User {
  id        String     @id @default(uuid())
  name      String     @db.VarChar(255)
  email     String     @unique @db.VarChar(255)
  password  String     @db.VarChar(255)
  isActive  Boolean    @default(true)
  role      Role       @default(USER)
  executive Executive?
  Blog      Blog[]

  @@map("users")
}

model Department {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  shortName String   @unique @db.VarChar(3)
  matric    String   @db.VarChar(255)
  HOD       String   @db.VarChar(255)
  about     String?
  Course    Course[]

  @@map("departments")
}

model Course {
  code         String       @id @db.VarChar(6)
  title        String       @db.VarChar(255)
  credit       Int          @db.Int
  status       CourseStatus @default(C)
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId String

  @@map("courses")
}

model Executive {
  id          String   @id @default(uuid())
  position    String   @db.VarChar(255)
  description String
  type        ExcoType @default(CISSA)
  order       Int      @default(1)
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique

  @@map("executives")
}

model Event {
  id       String   @id @default(uuid())
  date     DateTime
  title    String   @db.VarChar(255)
  imageUrl String   @db.VarChar(255)
  price    String   @db.VarChar(255)
  link     String   @db.VarChar(255)
  venue    String   @db.VarChar(255)

  @@map("events")
}

model Blog {
  id        String    @id @default(uuid())
  heading   String    @db.VarChar(255)
  imageUrl  String    @db.VarChar(255)
  slug      String    @unique @db.VarChar(255)
  published Boolean   @default(false)
  draft     Boolean   @default(false)
  content   String    @db.LongText
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  blogTag   BlogTag[]

  @@map("blogs")
}

model Tag {
  id        String    @id @default(uuid())
  title     String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  BlogTag   BlogTag[]

  @@map("tags")
}

model BlogTag {
  id        String   @id @default(uuid())
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogTags")
}
